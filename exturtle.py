# -*- coding: utf-8 -*-
#
#  Do NOT edit this file directly. It is created by boilturtle.py
# 

"""
===========================
Turtle functions for Exeter
===========================

Procedural interface to the turtle module allowing more than one turtle.

Copyright (c) Richard Everson, University of Exeter, 2014

Generated at 2014-10-12 12:03
"""

import turtle as _turtle
from turtle import Turtle



from turtle import addshape, bgcolor, bgpic, bye, clearscreen, colormode, delay, exitonclick, getcanvas, getshapes, listen, mainloop, mode, numinput, onkey, onkeypress, onkeyrelease, onscreenclick, ontimer, register_shape, resetscreen, screensize, setup, setworldcoordinates, textinput, title, tracer, turtles, update, window_height, window_width

def back(turtle, distance):
    """Move the turtle backward by distance.

        Aliases: back | backward | bk

        Arguments:
        turtle -- the turtle
        distance -- a number

        Move the turtle backward by distance ,opposite to the direction the
        turtle is headed. Do not change the turtle's heading.

        Example:
        >>> position(turtle)
        (0.00, 0.00)
        >>> backward(turtle, 30)
        >>> position(turtle)
        (-30.00, 0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to back is not a valid turtle"))
    turtle.back(distance)


def backward(turtle, distance):
    """Move the turtle backward by distance.

        Aliases: back | backward | bk

        Arguments:
        turtle -- the turtle
        distance -- a number

        Move the turtle backward by distance ,opposite to the direction the
        turtle is headed. Do not change the turtle's heading.

        Example:
        >>> position(turtle)
        (0.00, 0.00)
        >>> backward(turtle, 30)
        >>> position(turtle)
        (-30.00, 0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to backward is not a valid turtle"))
    turtle.backward(distance)


def begin_fill(turtle):
    """Called just before drawing a shape to be filled.

        Argument:
        turtle -- the turtle

        Example:
        >>> color(turtle, "black", "red")
        >>> begin_fill(turtle)
        >>> circle(turtle, 60)
        >>> end_fill(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to begin_fill is not a valid turtle"))
    turtle.begin_fill()


def begin_poly(turtle):
    """Start recording the vertices of a polygon.

        Argument:
        turtle -- the turtle

        Start recording the vertices of a polygon. Current turtle position
        is first point of polygon.

        Example:
        >>> begin_poly(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to begin_poly is not a valid turtle"))
    turtle.begin_poly()


def bk(turtle, distance):
    """Move the turtle backward by distance.

        Aliases: back | backward | bk

        Arguments:
        turtle -- the turtle
        distance -- a number

        Move the turtle backward by distance ,opposite to the direction the
        turtle is headed. Do not change the turtle's heading.

        Example:
        >>> position(turtle)
        (0.00, 0.00)
        >>> backward(turtle, 30)
        >>> position(turtle)
        (-30.00, 0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to bk is not a valid turtle"))
    turtle.bk(distance)


def circle(turtle, radius, extent=None, steps=None):
    """ Draw a circle with given radius.

        Arguments:
        turtle -- the turtle
        radius -- a number
        extent (optional) -- a number
        steps (optional) -- an integer

        Draw a circle with given radius. The center is radius units left
        of the turtle; extent - an angle - determines which part of the
        circle is drawn. If extent is not given, draw the entire circle.
        If extent is not a full circle, one endpoint of the arc is the
        current pen position. Draw the arc in counterclockwise direction
        if radius is positive, otherwise in clockwise direction. Finally
        the direction of the turtle is changed by the amount of extent.

        As the circle is approximated by an inscribed regular polygon,
        steps determines the number of steps to use. If not given,
        it will be calculated automatically. Maybe used to draw regular
        polygons.

        call: circle(turtle, radius)                  # full circle
        --or: circle(turtle, radius, extent)          # arc
        --or: circle(turtle, radius, extent, steps)
        --or: circle(turtle, radius, steps=6)         # 6-sided polygon

        Example:
        >>> circle(turtle, 50)
        >>> circle(turtle, 120, 180)  # semicircle
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to circle is not a valid turtle"))
    turtle.circle(radius, extent, steps)


def clear(turtle):
    """Delete the turtle's drawings from the screen. Do not move 

        Argument:
        turtle -- the turtle

        Delete the turtle's drawings from the screen. Do not move 
        State and position of the turtle as well as drawings of other
        turtles are not affected.

        Examples:
        >>> clear(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to clear is not a valid turtle"))
    turtle.clear()


def clearstamp(turtle, stampid):
    """Delete stamp with given stampid

        Arguments:
        turtle -- the turtle
        stampid - an integer, must be return value of previous stamp(turtle) call.

        Example:
        >>> color(turtle, "blue")
        >>> astamp = stamp(turtle)
        >>> fd(turtle, 50)
        >>> clearstamp(turtle, astamp)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to clearstamp is not a valid turtle"))
    turtle.clearstamp(stampid)


def clearstamps(turtle, n=None):
    """Delete all or first/last n of turtle's stamps.

        Optional argument:
        n -- an integer

        If n is None, delete all of pen's stamps,
        else if n > 0 delete first n stamps
        else if n < 0 delete last n stamps.

        Example:
        >>> for i in range(8):
        ...     stamp(turtle); fd(turtle, 30)
        ...
        >>> clearstamps(turtle, 2)
        >>> clearstamps(turtle, -2)
        >>> clearstamps(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to clearstamps is not a valid turtle"))
    turtle.clearstamps(n)


def clone(turtle):
    """Create and return a clone of the 

        Argument:
        turtle -- the turtle

        Create and return a clone of the turtle with same position, heading
        and turtle properties.

        Example (for a Turtle instance named mick):
        mick = Turtle()
        joe = mick.clone()
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to clone is not a valid turtle"))
    return turtle.clone()


def color(turtle, *args):
    """Return or set the pencolor and fillcolor.

        Arguments:
        turtle -- the turtle
        Several input formats are allowed.
        They use 0, 1, 2, or 3 arguments as follows:

        color(turtle)
            Return the current pencolor and the current fillcolor
            as a pair of color specification strings as are returned
            by pencolor and fillcolor.
        color(turtle, colorstring), color(turtle, (r,g,b)), color(turtle, r,g,b)
            inputs as in pencolor, set both, fillcolor and pencolor,
            to the given value.
        color(turtle, colorstring1, colorstring2),
        color(turtle, (r1,g1,b1), (r2,g2,b2))
            equivalent to pencolor(turtle, colorstring1) and fillcolor(turtle, colorstring2)
            and analogously, if the other input format is used.

        If turtleshape is a polygon, outline and interior of that polygon
        is drawn with the newly set colors.
        For mor info see: pencolor, fillcolor

        Example:
        >>> color(turtle, 'red', 'green')
        >>> color(turtle)
        ('red', 'green')
        >>> colormode(255)
        >>> color(turtle, (40, 80, 120), (160, 200, 240))
        >>> color(turtle)
        ('#285078', '#a0c8f0')
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to color is not a valid turtle"))
    return turtle.color(*args)


def degrees(turtle, fullcircle=360.0):
    """ Set angle measurement units to degrees.

        Optional argument:
        fullcircle -  a number

        Set angle measurement units, i. e. set number
        of 'degrees' for a full circle. Dafault value is
        360 degrees.

        Example:
        >>> left(turtle, 90)
        >>> heading(turtle)
        90

        Change angle measurement unit to grad (also known as gon,
        grade, or gradian and equals 1/100-th of the right angle.)
        >>> degrees(turtle, 400.0)
        >>> heading(turtle)
        100

        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to degrees is not a valid turtle"))
    turtle.degrees(fullcircle)


def distance(turtle, x, y=None):
    """Return the distance from the turtle to (x,y) in turtle step units.

        Arguments:
        turtle -- the turtle
        x -- a number   or  a pair/vector of numbers   or   a turtle instance
        y -- a number       None                            None

        call: distance(turtle, x, y)         # two coordinates
        --or: distance(turtle, (x, y))       # a pair (tuple) of coordinates
        --or: distance(turtle, vec)          # e.g. as returned by pos(turtle)
        --or: distance(turtle, mypen)        # where mypen is another turtle

        Example:
        >>> pos(turtle)
        (0.00, 0.00)
        >>> distance(turtle, 30,40)
        50.0
        >>> pen = Turtle()
        >>> pen.forward(77)
        >>> distance(turtle, pen)
        77.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to distance is not a valid turtle"))
    return turtle.distance(x, y)


def dot(turtle, size=None, *color):
    """Draw a dot with diameter size, using color.

        Optional arguments:
        size -- an integer >= 1 (if given)
        color -- a colorstring or a numeric color tuple

        Draw a circular dot with diameter size, using color.
        If size is not given, the maximum of pensize+4 and 2*pensize is used.

        Example:
        >>> dot(turtle)
        >>> fd(turtle, 50); dot(turtle, 20, "blue"); fd(turtle, 50)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to dot is not a valid turtle"))
    turtle.dot(size, *color)


def down(turtle):
    """Pull the pen down -- drawing when moving.

        Aliases: pendown | pd | down

        Argument:
        turtle -- the turtle

        Example:
        >>> pendown(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to down is not a valid turtle"))
    turtle.down()


def end_fill(turtle):
    """Fill the shape drawn after the call begin_fill(turtle).

        Argument:
        turtle -- the turtle

        Example:
        >>> color(turtle, "black", "red")
        >>> begin_fill(turtle)
        >>> circle(turtle, 60)
        >>> end_fill(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to end_fill is not a valid turtle"))
    turtle.end_fill()


def end_poly(turtle):
    """Stop recording the vertices of a polygon.

        Argument:
        turtle -- the turtle

        Stop recording the vertices of a polygon. Current turtle position is
        last point of polygon. This will be connected with the first point.

        Example:
        >>> end_poly(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to end_poly is not a valid turtle"))
    turtle.end_poly()


def fd(turtle, distance):
    """Move the turtle forward by the specified distance.

        Aliases: forward | fd

        Arguments:
        turtle -- the turtle
        distance -- a number (integer or float)

        Move the turtle forward by the specified distance, in the direction
        the turtle is headed.

        Example:
        >>> position(turtle)
        (0.00, 0.00)
        >>> forward(turtle, 25)
        >>> position(turtle)
        (25.00,0.00)
        >>> forward(turtle, -75)
        >>> position(turtle)
        (-50.00,0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to fd is not a valid turtle"))
    turtle.fd(distance)


def fillcolor(turtle, *args):
    """ Return or set the fillcolor.

        Arguments:
        turtle -- the turtle
        Four input formats are allowed:
          - fillcolor(turtle)
            Return the current fillcolor as color specification string,
            possibly in hex-number format (see example).
            May be used as input to another color/pencolor/fillcolor call.
          - fillcolor(turtle, colorstring)
            s is a Tk color specification string, such as "red" or "yellow"
          - fillcolor(turtle, (r, g, b))
            *a tuple* of r, g, and b, which represent, an RGB color,
            and each of r, g, and b are in the range 0..colormode,
            where colormode is either 1.0 or 255
          - fillcolor(turtle, r, g, b)
            r, g, and b represent an RGB color, and each of r, g, and b
            are in the range 0..colormode

        If turtleshape is a polygon, the interior of that polygon is drawn
        with the newly set fillcolor.

        Example:
        >>> fillcolor(turtle, 'violet')
        >>> col = pencolor(turtle)
        >>> fillcolor(turtle, col)
        >>> fillcolor(turtle, 0, .5, 0)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to fillcolor is not a valid turtle"))
    return turtle.fillcolor(*args)


def filling(turtle):
    """Return fillstate (True if filling, False else).

        Argument:
        turtle -- the turtle

        Example:
        >>> begin_fill(turtle)
        >>> if filling(turtle):
        ...     pensize(turtle, 5)
        ... else:
        ...     pensize(turtle, 3)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to filling is not a valid turtle"))
    return turtle.filling()


def forward(turtle, distance):
    """Move the turtle forward by the specified distance.

        Aliases: forward | fd

        Arguments:
        turtle -- the turtle
        distance -- a number (integer or float)

        Move the turtle forward by the specified distance, in the direction
        the turtle is headed.

        Example:
        >>> position(turtle)
        (0.00, 0.00)
        >>> forward(turtle, 25)
        >>> position(turtle)
        (25.00,0.00)
        >>> forward(turtle, -75)
        >>> position(turtle)
        (-50.00,0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to forward is not a valid turtle"))
    turtle.forward(distance)


def get_poly(turtle):
    """Return the lastly recorded polygon.

        Argument:
        turtle -- the turtle

        Example:
        >>> p = get_poly(turtle)
        >>> register_shape("myFavouriteShape", p)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to get_poly is not a valid turtle"))
    return turtle.get_poly()


def get_shapepoly(turtle):
    """Return the current shape polygon as tuple of coordinate pairs.

        Argument:
        turtle -- the turtle

        Examples:
        >>> shape(turtle, "square")
        >>> shapetransform(turtle, 4, -1, 0, 2)
        >>> get_shapepoly(turtle)
        ((50, -20), (30, 20), (-50, 20), (-30, -20))

        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to get_shapepoly is not a valid turtle"))
    return turtle.get_shapepoly()


def getpen(turtle):
    """Return the Turtleobject itself.

        Argument:
        turtle -- the turtle

        Only reasonable use: as a function to return the 'anonymous turtle':

        Example:
        >>> pet = getturtle(turtle)
        >>> pet.fd(50)
        >>> pet
        <Turtle object at 0x0187D810>
        >>> turtles()
        [<Turtle object at 0x0187D810>]
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to getpen is not a valid turtle"))
    return turtle.getpen()


def getscreen(turtle):
    """Return the TurtleScreen object, the turtle is drawing  on.

        Argument:
        turtle -- the turtle

        Return the TurtleScreen object, the turtle is drawing  on.
        So TurtleScreen-methods can be called for that object.

        Example:
        >>> ts = getscreen(turtle)
        >>> ts
        <TurtleScreen object at 0x0106B770>
        >>> ts.bgcolor("pink")
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to getscreen is not a valid turtle"))
    return turtle.getscreen()


def getturtle(turtle):
    """Return the Turtleobject itself.

        Argument:
        turtle -- the turtle

        Only reasonable use: as a function to return the 'anonymous turtle':

        Example:
        >>> pet = getturtle(turtle)
        >>> pet.fd(50)
        >>> pet
        <Turtle object at 0x0187D810>
        >>> turtles()
        [<Turtle object at 0x0187D810>]
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to getturtle is not a valid turtle"))
    return turtle.getturtle()


def goto(turtle, x, y=None):
    """Move turtle to an absolute position.

        Aliases: setpos | setposition | goto:

        Arguments:
        turtle -- the turtle
        x -- a number      or     a pair/vector of numbers
        y -- a number             None

        call: goto(turtle, x, y)         # two coordinates
        --or: goto(turtle, (x, y))       # a pair (tuple) of coordinates
        --or: goto(turtle, vec)          # e.g. as returned by pos(turtle)

        Move turtle to an absolute position. If the pen is down,
        a line will be drawn. The turtle's orientation does not change.

        Example:
        >>> tp = pos(turtle)
        >>> tp
        (0.00, 0.00)
        >>> setpos(turtle, 60,30)
        >>> pos(turtle)
        (60.00,30.00)
        >>> setpos(turtle, (20,80))
        >>> pos(turtle)
        (20.00,80.00)
        >>> setpos(turtle, tp)
        >>> pos(turtle)
        (0.00,0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to goto is not a valid turtle"))
    turtle.goto(x, y)


def heading(turtle):
    """ Return the turtle's current heading.

        Argument:
        turtle -- the turtle

        Example:
        >>> left(turtle, 67)
        >>> heading(turtle)
        67.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to heading is not a valid turtle"))
    return turtle.heading()


def hideturtle(turtle):
    """Makes the turtle invisible.

        Aliases: hideturtle | ht

        Argument:
        turtle -- the turtle

        It's a good idea to do this while you're in the
        middle of a complicated drawing, because hiding
        the turtle speeds up the drawing observably.

        Example:
        >>> hideturtle(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to hideturtle is not a valid turtle"))
    turtle.hideturtle()


def home(turtle):
    """Move turtle to the origin - coordinates (0,0).

        Argument:
        turtle -- the turtle

        Move turtle to the origin - coordinates (0,0) and set its
        heading to its start-orientation (which depends on mode).

        Example:
        >>> home(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to home is not a valid turtle"))
    turtle.home()


def ht(turtle):
    """Makes the turtle invisible.

        Aliases: hideturtle | ht

        Argument:
        turtle -- the turtle

        It's a good idea to do this while you're in the
        middle of a complicated drawing, because hiding
        the turtle speeds up the drawing observably.

        Example:
        >>> hideturtle(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to ht is not a valid turtle"))
    turtle.ht()


def isdown(turtle):
    """Return True if pen is down, False if it's up.

        Argument:
        turtle -- the turtle

        Example:
        >>> penup(turtle)
        >>> isdown(turtle)
        False
        >>> pendown(turtle)
        >>> isdown(turtle)
        True
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to isdown is not a valid turtle"))
    return turtle.isdown()


def isvisible(turtle):
    """Return True if the Turtle is shown, False if it's hidden.

        Argument:
        turtle -- the turtle

        Example:
        >>> hideturtle(turtle)
        >>> print isvisible(turtle):
        False
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to isvisible is not a valid turtle"))
    return turtle.isvisible()


def left(turtle, angle):
    """Turn turtle left by angle units.

        Aliases: left | lt

        Arguments:
        turtle -- the turtle
        angle -- a number (integer or float)

        Turn turtle left by angle units. (Units are by default degrees,
        but can be set via the degrees(turtle) and radians(turtle) functions.)
        Angle orientation depends on mode. (See this.)

        Example:
        >>> heading(turtle)
        22.0
        >>> left(turtle, 45)
        >>> heading(turtle)
        67.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to left is not a valid turtle"))
    turtle.left(angle)


def lt(turtle, angle):
    """Turn turtle left by angle units.

        Aliases: left | lt

        Arguments:
        turtle -- the turtle
        angle -- a number (integer or float)

        Turn turtle left by angle units. (Units are by default degrees,
        but can be set via the degrees(turtle) and radians(turtle) functions.)
        Angle orientation depends on mode. (See this.)

        Example:
        >>> heading(turtle)
        22.0
        >>> left(turtle, 45)
        >>> heading(turtle)
        67.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to lt is not a valid turtle"))
    turtle.lt(angle)


def onclick(turtle, fun, btn=1, add=None):
    """Bind fun to mouse-click event on this turtle on canvas.

        Arguments:
        turtle -- the turtle
        fun --  a function with two arguments, to which will be assigned
                the coordinates of the clicked point on the canvas.
        num --  number of the mouse-button defaults to 1 (left mouse button).
        add --  True or False. If True, new binding will be added, otherwise
                it will replace a former binding.

        Example for the anonymous turtle, i. e. the procedural way:

        >>> def turn(x, y):
        ...     left(turtle, 360)
        ...
        >>> onclick(turtle, turn)  # Now clicking into the turtle will turn it.
        >>> onclick(turtle, None)  # event-binding will be removed
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to onclick is not a valid turtle"))
    turtle.onclick(fun, btn, add)


def ondrag(turtle, fun, btn=1, add=None):
    """Bind fun to mouse-move event on this turtle on canvas.

        Arguments:
        turtle -- the turtle
        fun -- a function with two arguments, to which will be assigned
               the coordinates of the clicked point on the canvas.
        num -- number of the mouse-button defaults to 1 (left mouse button).

        Every sequence of mouse-move-events on a turtle is preceded by a
        mouse-click event on that 

        Example:
        >>> ondrag(turtle, goto)

        Subsequently clicking and dragging a Turtle will move it
        across the screen thereby producing handdrawings (if pen is
        down).
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to ondrag is not a valid turtle"))
    turtle.ondrag(fun, btn, add)


def onrelease(turtle, fun, btn=1, add=None):
    """Bind fun to mouse-button-release event on this turtle on canvas.

        Arguments:
        turtle -- the turtle
        fun -- a function with two arguments, to which will be assigned
                the coordinates of the clicked point on the canvas.
        num --  number of the mouse-button defaults to 1 (left mouse button).

        Example (for a MyTurtle instance named joe):
        >>> class MyTurtle(Turtle):
        ...     def glow(self,x,y):
        ...             self.fillcolor("red")
        ...     def unglow(self,x,y):
        ...             self.fillcolor("")
        ...
        >>> joe = MyTurtle()
        >>> joe.onclick(joe.glow)
        >>> joe.onrelease(joe.unglow)

        Clicking on joe turns fillcolor red, unclicking turns it to
        transparent.
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to onrelease is not a valid turtle"))
    turtle.onrelease(fun, btn, add)


def pd(turtle):
    """Pull the pen down -- drawing when moving.

        Aliases: pendown | pd | down

        Argument:
        turtle -- the turtle

        Example:
        >>> pendown(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to pd is not a valid turtle"))
    turtle.pd()


def pen(turtle, pen=None):
    """Return or set the pen's attributes.

        Arguments:
        turtle -- the turtle
            pen -- a dictionary with some or all of the below listed keys.
            **pendict -- one or more keyword-arguments with the below
                         listed keys as keywords.

        Return or set the pen's attributes in a 'pen-dictionary'
        with the following key/value pairs:
           "shown"      :   True/False
           "pendown"    :   True/False
           "pencolor"   :   color-string or color-tuple
           "fillcolor"  :   color-string or color-tuple
           "pensize"    :   positive number
           "speed"      :   number in range 0..10
           "resizemode" :   "auto" or "user" or "noresize"
           "stretchfactor": (positive number, positive number)
           "shearfactor":   number
           "outline"    :   positive number
           "tilt"       :   number

        This dictionary can be used as argument for a subsequent
        pen(turtle)-call to restore the former pen-state. Moreover one
        or more of these attributes can be provided as keyword-arguments.
        This can be used to set several pen attributes in one statement.


        Examples:
        >>> pen(turtle, fillcolor="black", pencolor="red", pensize=10)
        >>> pen(turtle)
        {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
        'pencolor': 'red', 'pendown': True, 'fillcolor': 'black',
        'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}
        >>> penstate=pen()
        >>> color(turtle, "yellow","")
        >>> penup(turtle)
        >>> pen(turtle)
        {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
        'pencolor': 'yellow', 'pendown': False, 'fillcolor': '',
        'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}
        >>> p.pen(penstate, fillcolor="green")
        >>> p.pen()
        {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
        'pencolor': 'red', 'pendown': True, 'fillcolor': 'green',
        'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to pen is not a valid turtle"))
    return turtle.pen(pen)


def pencolor(turtle, *args):
    """ Return or set the pencolor.

        Arguments:
        turtle -- the turtle
        Four input formats are allowed:
          - pencolor(turtle)
            Return the current pencolor as color specification string,
            possibly in hex-number format (see example).
            May be used as input to another color/pencolor/fillcolor call.
          - pencolor(turtle, colorstring)
            s is a Tk color specification string, such as "red" or "yellow"
          - pencolor(turtle, (r, g, b))
            *a tuple* of r, g, and b, which represent, an RGB color,
            and each of r, g, and b are in the range 0..colormode,
            where colormode is either 1.0 or 255
          - pencolor(turtle, r, g, b)
            r, g, and b represent an RGB color, and each of r, g, and b
            are in the range 0..colormode

        If turtleshape is a polygon, the outline of that polygon is drawn
        with the newly set pencolor.

        Example:
        >>> pencolor(turtle, 'brown')
        >>> tup = (0.2, 0.8, 0.55)
        >>> pencolor(turtle, tup)
        >>> pencolor(turtle)
        '#33cc8c'
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to pencolor is not a valid turtle"))
    return turtle.pencolor(*args)


def pendown(turtle):
    """Pull the pen down -- drawing when moving.

        Aliases: pendown | pd | down

        Argument:
        turtle -- the turtle

        Example:
        >>> pendown(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to pendown is not a valid turtle"))
    turtle.pendown()


def pensize(turtle, width=None):
    """Set or return the line thickness.

        Aliases:  pensize | width

        Arguments:
        turtle -- the turtle
        width -- positive number

        Set the line thickness to width or return it. If resizemode is set
        to "auto" and turtleshape is a polygon, that polygon is drawn with
        the same line thickness. If no argument is given, current pensize
        is returned.

        Example:
        >>> pensize(turtle)
        1
        >>> pensize(turtle, 10)   # from here on lines of width 10 are drawn
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to pensize is not a valid turtle"))
    return turtle.pensize(width)


def penup(turtle):
    """Pull the pen up -- no drawing when moving.

        Aliases: penup | pu | up

        Argument:
        turtle -- the turtle

        Example:
        >>> penup(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to penup is not a valid turtle"))
    turtle.penup()


def pos(turtle):
    """Return the turtle's current location (x,y), as a Vec2D-vector.

        Aliases: pos | position

        Argument:
        turtle -- the turtle

        Example:
        >>> pos(turtle)
        (0.00, 240.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to pos is not a valid turtle"))
    return turtle.pos()


def position(turtle):
    """Return the turtle's current location (x,y), as a Vec2D-vector.

        Aliases: pos | position

        Argument:
        turtle -- the turtle

        Example:
        >>> pos(turtle)
        (0.00, 240.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to position is not a valid turtle"))
    return turtle.position()


def pu(turtle):
    """Pull the pen up -- no drawing when moving.

        Aliases: penup | pu | up

        Argument:
        turtle -- the turtle

        Example:
        >>> penup(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to pu is not a valid turtle"))
    turtle.pu()


def radians(turtle):
    """ Set the angle measurement units to radians.

        Argument:
        turtle -- the turtle

        Example:
        >>> heading(turtle)
        90
        >>> radians(turtle)
        >>> heading(turtle)
        1.5707963267948966
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to radians is not a valid turtle"))
    turtle.radians()


def reset(turtle):
    """Delete the turtle's drawings and restore its default values.

        Argument:
        turtle -- the turtle

        Delete the turtle's drawings from the screen, re-center the turtle
        and set variables to the default values.

        Example:
        >>> position(turtle)
        (0.00,-22.00)
        >>> heading(turtle)
        100.0
        >>> reset(turtle)
        >>> position(turtle)
        (0.00,0.00)
        >>> heading(turtle)
        0.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to reset is not a valid turtle"))
    turtle.reset()


def resizemode(turtle, rmode=None):
    """Set resizemode to one of the values: "auto", "user", "noresize".

        (Optional) Arguments:
        turtle -- the turtle
        rmode -- one of the strings "auto", "user", "noresize"

        Different resizemodes have the following effects:
          - "auto" adapts the appearance of the turtle
                   corresponding to the value of pensize.
          - "user" adapts the appearance of the turtle according to the
                   values of stretchfactor and outlinewidth (outline),
                   which are set by shapesize(turtle)
          - "noresize" no adaption of the turtle's appearance takes place.
        If no argument is given, return current resizemode.
        resizemode(turtle, "user") is called by a call of shapesize with arguments.


        Examples:
        >>> resizemode(turtle, "noresize")
        >>> resizemode(turtle)
        'noresize'
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to resizemode is not a valid turtle"))
    turtle.resizemode(rmode)


def right(turtle, angle):
    """Turn turtle right by angle units.

        Aliases: right | rt

        Arguments:
        turtle -- the turtle
        angle -- a number (integer or float)

        Turn turtle right by angle units. (Units are by default degrees,
        but can be set via the degrees(turtle) and radians(turtle) functions.)
        Angle orientation depends on mode. (See this.)

        Example:
        >>> heading(turtle)
        22.0
        >>> right(turtle, 45)
        >>> heading(turtle)
        337.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to right is not a valid turtle"))
    turtle.right(angle)


def rt(turtle, angle):
    """Turn turtle right by angle units.

        Aliases: right | rt

        Arguments:
        turtle -- the turtle
        angle -- a number (integer or float)

        Turn turtle right by angle units. (Units are by default degrees,
        but can be set via the degrees(turtle) and radians(turtle) functions.)
        Angle orientation depends on mode. (See this.)

        Example:
        >>> heading(turtle)
        22.0
        >>> right(turtle, 45)
        >>> heading(turtle)
        337.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to rt is not a valid turtle"))
    turtle.rt(angle)


def seth(turtle, to_angle):
    """Set the orientation of the turtle to to_angle.

        Aliases:  setheading | seth

        Arguments:
        turtle -- the turtle
        to_angle -- a number (integer or float)

        Set the orientation of the turtle to to_angle.
        Here are some common directions in degrees:

         standard - mode:          logo-mode:
        -------------------|--------------------
           0 - east                0 - north
          90 - north              90 - east
         180 - west              180 - south
         270 - south             270 - west

        Example:
        >>> setheading(turtle, 90)
        >>> heading(turtle)
        90
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to seth is not a valid turtle"))
    turtle.seth(to_angle)


def setheading(turtle, to_angle):
    """Set the orientation of the turtle to to_angle.

        Aliases:  setheading | seth

        Arguments:
        turtle -- the turtle
        to_angle -- a number (integer or float)

        Set the orientation of the turtle to to_angle.
        Here are some common directions in degrees:

         standard - mode:          logo-mode:
        -------------------|--------------------
           0 - east                0 - north
          90 - north              90 - east
         180 - west              180 - south
         270 - south             270 - west

        Example:
        >>> setheading(turtle, 90)
        >>> heading(turtle)
        90
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to setheading is not a valid turtle"))
    turtle.setheading(to_angle)


def setpos(turtle, x, y=None):
    """Move turtle to an absolute position.

        Aliases: setpos | setposition | goto:

        Arguments:
        turtle -- the turtle
        x -- a number      or     a pair/vector of numbers
        y -- a number             None

        call: goto(turtle, x, y)         # two coordinates
        --or: goto(turtle, (x, y))       # a pair (tuple) of coordinates
        --or: goto(turtle, vec)          # e.g. as returned by pos(turtle)

        Move turtle to an absolute position. If the pen is down,
        a line will be drawn. The turtle's orientation does not change.

        Example:
        >>> tp = pos(turtle)
        >>> tp
        (0.00, 0.00)
        >>> setpos(turtle, 60,30)
        >>> pos(turtle)
        (60.00,30.00)
        >>> setpos(turtle, (20,80))
        >>> pos(turtle)
        (20.00,80.00)
        >>> setpos(turtle, tp)
        >>> pos(turtle)
        (0.00,0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to setpos is not a valid turtle"))
    turtle.setpos(x, y)


def setposition(turtle, x, y=None):
    """Move turtle to an absolute position.

        Aliases: setpos | setposition | goto:

        Arguments:
        turtle -- the turtle
        x -- a number      or     a pair/vector of numbers
        y -- a number             None

        call: goto(turtle, x, y)         # two coordinates
        --or: goto(turtle, (x, y))       # a pair (tuple) of coordinates
        --or: goto(turtle, vec)          # e.g. as returned by pos(turtle)

        Move turtle to an absolute position. If the pen is down,
        a line will be drawn. The turtle's orientation does not change.

        Example:
        >>> tp = pos(turtle)
        >>> tp
        (0.00, 0.00)
        >>> setpos(turtle, 60,30)
        >>> pos(turtle)
        (60.00,30.00)
        >>> setpos(turtle, (20,80))
        >>> pos(turtle)
        (20.00,80.00)
        >>> setpos(turtle, tp)
        >>> pos(turtle)
        (0.00,0.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to setposition is not a valid turtle"))
    turtle.setposition(x, y)


def settiltangle(turtle, angle):
    """Rotate the turtleshape to point in the specified direction

        Argument: angle -- number

        Rotate the turtleshape to point in the direction specified by angle,
        regardless of its current tilt-angle. DO NOT change the turtle's
        heading (direction of movement).


        Examples:
        >>> shape(turtle, "circle")
        >>> shapesize(turtle, 5,2)
        >>> settiltangle(turtle, 45)
        >>> stamp(turtle)
        >>> fd(turtle, 50)
        >>> settiltangle(turtle, -45)
        >>> stamp(turtle)
        >>> fd(turtle, 50)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to settiltangle is not a valid turtle"))
    turtle.settiltangle(angle)


def setundobuffer(turtle, size):
    """Set or disable undobuffer.

        Arguments:
        turtle -- the turtle
        size -- an integer or None

        If size is an integer an empty undobuffer of given size is installed.
        Size gives the maximum number of turtle-actions that can be undone
        by the undo(turtle) function.
        If size is None, no undobuffer is present.

        Example:
        >>> setundobuffer(turtle, 42)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to setundobuffer is not a valid turtle"))
    turtle.setundobuffer(size)


def setx(turtle, x):
    """Set the turtle's first coordinate to x

        Arguments:
        turtle -- the turtle
        x -- a number (integer or float)

        Set the turtle's first coordinate to x, leave second coordinate
        unchanged.

        Example:
        >>> position(turtle)
        (0.00, 240.00)
        >>> setx(turtle, 10)
        >>> position(turtle)
        (10.00, 240.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to setx is not a valid turtle"))
    turtle.setx(x)


def sety(turtle, y):
    """Set the turtle's second coordinate to y

        Arguments:
        turtle -- the turtle
        y -- a number (integer or float)

        Set the turtle's first coordinate to x, second coordinate remains
        unchanged.

        Example:
        >>> position(turtle)
        (0.00, 40.00)
        >>> sety(turtle, -10)
        >>> position(turtle)
        (0.00, -10.00)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to sety is not a valid turtle"))
    turtle.sety(y)


def shape(turtle, name=None):
    """Set turtle shape to shape with given name / return current shapename.

        Optional argument:
        name -- a string, which is a valid shapename

        Set turtle shape to shape with given name or, if name is not given,
        return name of current shape.
        Shape with name must exist in the TurtleScreen's shape dictionary.
        Initially there are the following polygon shapes:
        'arrow', 'turtle', 'circle', 'square', 'triangle', 'classic'.
        To learn about how to deal with shapes see Screen-method register_shape.

        Example:
        >>> shape(turtle)
        'arrow'
        >>> shape(turtle, "turtle")
        >>> shape(turtle)
        'turtle'
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to shape is not a valid turtle"))
    return turtle.shape(name)


def shapesize(turtle, stretch_wid=None, stretch_len=None, outline=None):
    """Set/return turtle's stretchfactors/outline. Set resizemode to "user".

        Optional arguments:
           stretch_wid : positive number
           stretch_len : positive number
           outline  : positive number

        Return or set the pen's attributes x/y-stretchfactors and/or outline.
        Set resizemode to "user".
        If and only if resizemode is set to "user", the turtle will be displayed
        stretched according to its stretchfactors:
        stretch_wid is stretchfactor perpendicular to orientation
        stretch_len is stretchfactor in direction of turtles orientation.
        outline determines the width of the shapes's outline.

        Examples:
        >>> resizemode(turtle, "user")
        >>> shapesize(turtle, 5, 5, 12)
        >>> shapesize(turtle, outline=8)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to shapesize is not a valid turtle"))
    return turtle.shapesize(stretch_wid, stretch_len, outline)


def shapetransform(turtle, t11=None, t12=None, t21=None, t22=None):
    """Set or return the current transformation matrix of the turtle shape.

        Optional arguments: t11, t12, t21, t22 -- numbers.

        If none of the matrix elements are given, return the transformation
        matrix.
        Otherwise set the given elements and transform the turtleshape
        according to the matrix consisting of first row t11, t12 and
        second row t21, 22.
        Modify stretchfactor, shearfactor and tiltangle according to the
        given matrix.

        Examples:
        >>> shape(turtle, "square")
        >>> shapesize(turtle, 4,2)
        >>> shearfactor(turtle, -0.5)
        >>> shapetransform(turtle)
        (4.0, -1.0, -0.0, 2.0)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to shapetransform is not a valid turtle"))
    return turtle.shapetransform(t11, t12, t21, t22)


def shearfactor(turtle, shear=None):
    """Set or return the current shearfactor.

        Optional argument: shear -- number, tangent of the shear angle

        Shear the turtleshape according to the given shearfactor shear,
        which is the tangent of the shear angle. DO NOT change the
        turtle's heading (direction of movement).
        If shear is not given: return the current shearfactor, i. e. the
        tangent of the shear angle, by which lines parallel to the
        heading of the turtle are sheared.

        Examples:
        >>> shape(turtle, "circle")
        >>> shapesize(turtle, 5,2)
        >>> shearfactor(turtle, 0.5)
        >>> shearfactor(turtle)
        >>> 0.5
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to shearfactor is not a valid turtle"))
    return turtle.shearfactor(shear)


def showturtle(turtle):
    """Makes the turtle visible.

        Aliases: showturtle | st

        Argument:
        turtle -- the turtle

        Example:
        >>> hideturtle(turtle)
        >>> showturtle(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to showturtle is not a valid turtle"))
    turtle.showturtle()


def speed(turtle, speed=None):
    """ Return or set the turtle's speed.

        Optional argument:
        speed -- an integer in the range 0..10 or a speedstring (see below)

        Set the turtle's speed to an integer value in the range 0 .. 10.
        If no argument is given: return current speed.

        If input is a number greater than 10 or smaller than 0.5,
        speed is set to 0.
        Speedstrings  are mapped to speedvalues in the following way:
            'fastest' :  0
            'fast'    :  10
            'normal'  :  6
            'slow'    :  3
            'slowest' :  1
        speeds from 1 to 10 enforce increasingly faster animation of
        line drawing and turtle turning.

        Attention:
        speed = 0 : *no* animation takes place. forward/back makes turtle jump
        and likewise left/right make the turtle turn instantly.

        Example:
        >>> speed(turtle, 3)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to speed is not a valid turtle"))
    return turtle.speed(speed)


def st(turtle):
    """Makes the turtle visible.

        Aliases: showturtle | st

        Argument:
        turtle -- the turtle

        Example:
        >>> hideturtle(turtle)
        >>> showturtle(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to st is not a valid turtle"))
    turtle.st()


def stamp(turtle):
    """Stamp a copy of the turtleshape onto the canvas and return its id.

        Argument:
        turtle -- the turtle

        Stamp a copy of the turtle shape onto the canvas at the current
        turtle position. Return a stamp_id for that stamp, which can be
        used to delete it by calling clearstamp(turtle, stamp_id).

        Example:
        >>> color(turtle, "blue")
        >>> stamp(turtle)
        13
        >>> fd(turtle, 50)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to stamp is not a valid turtle"))
    return turtle.stamp()


def tilt(turtle, angle):
    """Rotate the turtleshape by angle.

        Arguments:
        turtle -- the turtle
        angle - a number

        Rotate the turtleshape by angle from its current tilt-angle,
        but do NOT change the turtle's heading (direction of movement).

        Examples:
        >>> shape(turtle, "circle")
        >>> shapesize(turtle, 5,2)
        >>> tilt(turtle, 30)
        >>> fd(turtle, 50)
        >>> tilt(turtle, 30)
        >>> fd(turtle, 50)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to tilt is not a valid turtle"))
    turtle.tilt(angle)


def tiltangle(turtle, angle=None):
    """Set or return the current tilt-angle.

        Optional argument: angle -- number

        Rotate the turtleshape to point in the direction specified by angle,
        regardless of its current tilt-angle. DO NOT change the turtle's
        heading (direction of movement).
        If angle is not given: return the current tilt-angle, i. e. the angle
        between the orientation of the turtleshape and the heading of the
        turtle (its direction of movement).

        Deprecated since Python 3.1

        Examples:
        >>> shape(turtle, "circle")
        >>> shapesize(turtle, 5,2)
        >>> tilt(turtle, 45)
        >>> tiltangle(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to tiltangle is not a valid turtle"))
    return turtle.tiltangle(angle)


def towards(turtle, x, y=None):
    """Return the angle of the line from the turtle's position to (x, y).

        Arguments:
        turtle -- the turtle
        x -- a number   or  a pair/vector of numbers   or   a turtle instance
        y -- a number       None                            None

        call: distance(turtle, x, y)         # two coordinates
        --or: distance(turtle, (x, y))       # a pair (tuple) of coordinates
        --or: distance(turtle, vec)          # e.g. as returned by pos(turtle)
        --or: distance(turtle, mypen)        # where mypen is another turtle

        Return the angle, between the line from turtle-position to position
        specified by x, y and the turtle's start orientation. (Depends on
        modes - "standard" or "logo")

        Example:
        >>> pos(turtle)
        (10.00, 10.00)
        >>> towards(turtle, 0,0)
        225.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to towards is not a valid turtle"))
    return turtle.towards(x, y)


def turtlesize(turtle, stretch_wid=None, stretch_len=None, outline=None):
    """Set/return turtle's stretchfactors/outline. Set resizemode to "user".

        Optional arguments:
           stretch_wid : positive number
           stretch_len : positive number
           outline  : positive number

        Return or set the pen's attributes x/y-stretchfactors and/or outline.
        Set resizemode to "user".
        If and only if resizemode is set to "user", the turtle will be displayed
        stretched according to its stretchfactors:
        stretch_wid is stretchfactor perpendicular to orientation
        stretch_len is stretchfactor in direction of turtles orientation.
        outline determines the width of the shapes's outline.

        Examples:
        >>> resizemode(turtle, "user")
        >>> shapesize(turtle, 5, 5, 12)
        >>> shapesize(turtle, outline=8)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to turtlesize is not a valid turtle"))
    return turtle.turtlesize(stretch_wid, stretch_len, outline)


def undo(turtle):
    """undo (repeatedly) the last turtle action.

        Argument:
        turtle -- the turtle

        undo (repeatedly) the last turtle action.
        Number of available undo actions is determined by the size of
        the undobuffer.

        Example:
        >>> for i in range(4):
        ...     fd(turtle, 50); lt(turtle, 80)
        ...
        >>> for i in range(8):
        ...     undo(turtle)
        ...
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to undo is not a valid turtle"))
    turtle.undo()


def undobufferentries(turtle):
    """Return count of entries in the undobuffer.

        Argument:
        turtle -- the turtle

        Example:
        >>> while undobufferentries(turtle):
        ...     undo(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to undobufferentries is not a valid turtle"))
    return turtle.undobufferentries()


def up(turtle):
    """Pull the pen up -- no drawing when moving.

        Aliases: penup | pu | up

        Argument:
        turtle -- the turtle

        Example:
        >>> penup(turtle)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to up is not a valid turtle"))
    turtle.up()


def width(turtle, width=None):
    """Set or return the line thickness.

        Aliases:  pensize | width

        Arguments:
        turtle -- the turtle
        width -- positive number

        Set the line thickness to width or return it. If resizemode is set
        to "auto" and turtleshape is a polygon, that polygon is drawn with
        the same line thickness. If no argument is given, current pensize
        is returned.

        Example:
        >>> pensize(turtle)
        1
        >>> pensize(turtle, 10)   # from here on lines of width 10 are drawn
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to width is not a valid turtle"))
    return turtle.width(width)


def write(turtle, arg, move=False, align='left', font=('Arial', 8, 'normal')):
    """Write text at the current turtle position.

        Arguments:
        turtle -- the turtle
        arg -- info, which is to be written to the TurtleScreen
        move (optional) -- True/False
        align (optional) -- one of the strings "left", "center" or right"
        font (optional) -- a triple (fontname, fontsize, fonttype)

        Write text - the string representation of arg - at the current
        turtle position according to align ("left", "center" or right")
        and with the given font.
        If move is True, the pen is moved to the bottom-right corner
        of the text. By default, move is False.

        Example:
        >>> write(turtle, 'Home = ', True, align="center")
        >>> write(turtle, (0,0), True)
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to write is not a valid turtle"))
    turtle.write(arg, move, align, font)


def xcor(turtle):
    """ Return the turtle's x coordinate.

        Argument:
        turtle -- the turtle

        Example:
        >>> reset(turtle)
        >>> left(turtle, 60)
        >>> forward(turtle, 100)
        >>> print xcor(turtle)
        50.0
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to xcor is not a valid turtle"))
    return turtle.xcor()


def ycor(turtle):
    """ Return the turtle's y coordinate
        ---
        Argument:
        turtle -- the turtle

        Example:
        >>> reset(turtle)
        >>> left(turtle, 60)
        >>> forward(turtle, 100)
        >>> print ycor(turtle)
        86.6025403784
        """
    if type(turtle) != _turtle.Turtle:
        raise(TypeError("turtle argument to ycor is not a valid turtle"))
    return turtle.ycor()

